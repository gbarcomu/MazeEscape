package InteractuarFicheros;

import java.io.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import EstrucurasDeDatos.Grafo;
import Laberinto.Laberinto;
import Otros.Llave;
import Robot.Robots;

public class VolcarFichero {

	private Laberinto lab;
	private Queue<Robots> robotsEnSalaAux;
	private Stack<Llave> llavesEnSalaAux;
	
	public VolcarFichero () {
	
		lab = Laberinto.getInstancia();
	}
	
	public void volcadoVarios (PrintWriter pw){
		
		pw.println ("(turno:" + lab.getTurno() + ")");
		pw.println ("(laberinto:" + ((lab.getMaxFilas()*lab.getMaxColumnas())-1) + ")");
		
		String estado;
		
		if(lab.devolverSalaConPuerta().esPuertaAbierta()) {
			
			estado = "abierta";			
		}
	
		else {
			
			estado = "cerrada";
		}
		pw.print ("(puerta:" + estado + ":" + lab.getProfundidadPuerta() + ":");
		 
		LinkedList<Llave> llavesLab = 	lab.devolverSalaConPuerta().mostrarLlavesPuerta();
		
		for (int i = 0; i < llavesLab.size(); i++) {
						 
			pw.print(" "+ llavesLab.get(i).getIdLlave());
					 
		}
		pw.print(":");
		LinkedList<Llave> llavesProb = 	lab.devolverSalaConPuerta().mostrarLlavesProbadas();
		

		
		for (int i = 0; i < llavesProb.size(); i++) {
			 
			pw.print(" "+ llavesProb.get(i).getIdLlave());
					 
		}
		
		llavesLab.clear();
		llavesProb.clear();
		pw.println(")");
		
	}
	
	public void volcadoSalas(PrintWriter pw) {
		
		llavesEnSalaAux = new Stack<Llave>();
		Llave llaveAux;
		for (int i = 0; i < lab.getMaxFilas(); i++) {
			
			for (int j = 0; j< lab.getMaxColumnas(); j++) {
				
				if (!lab.devolverSala(i, j).llaveroVacio()) {
					
					pw.print ("(sala:" + lab.devolverSala(i, j).getIdSala() + ":");
								
					while(!lab.devolverSala(i, j).llaveroVacio()) {
						
						llaveAux = lab.devolverSala(i, j).recogerLlaveSala();
						pw.print (" " + llaveAux.getIdLlave());
						llavesEnSalaAux.push(llaveAux);
					}
					pw.println(")");
				}
				recomponerLlavesSala(i,j);

			}
		}
	}
	
	public void recomponerLlavesSala(int i,int j) {
		
		while (!llavesEnSalaAux.empty()) {
			
			lab.devolverSala(i, j).dejarLlaveSala(llavesEnSalaAux.pop());
		}
	}
	
	public void volcadoRobots(PrintWriter pw) {
		Llave llaveAux;
		
		robotsEnSalaAux = new LinkedList<Robots>();
		llavesEnSalaAux = new Stack<Llave>();
		
		for (int i = 0; i < lab.getMaxFilas(); i++) {
			
			for (int j = 0; j< lab.getMaxColumnas(); j++) {

				while (lab.devolverSala(i, j).hayRobot()) {
					
					Robots robAux = lab.devolverSala(i, j).robotSale();
					pw.print("("+ robAux.getNombre() + ":" + robAux.getIdRobot()
							+ ":" + i + ":" + j + ": ");
					
					robotsEnSalaAux.add(robAux);
					
					while(!robAux.llaverVacio()) {
						
						llaveAux = robAux.sacarLlave();
						pw.print (llaveAux.getIdLlave() + " ");
						llavesEnSalaAux.push(llaveAux);
					}
					recomponerLlaves(robAux);
					
					pw.println(")");
				}
				recomponerRobots(i,j);
			}
		}			
		
		while (lab.devovlerSalaGanadores().hayRobot()) {
			
			Robots robAux = lab.devovlerSalaGanadores().robotSale();
			
			pw.println("("+ robAux.getNombre() + ":" + robAux.getIdRobot()
					+ ":" + -1 + ":" + -1 + ") ");
		}
	}
	private void recomponerRobots(int i, int j) {
		
		Robots rob;
		while (!robotsEnSalaAux.isEmpty()) {
			
			rob = robotsEnSalaAux.poll();
			lab.devolverSala(i, j).robotEntra(rob);
		}
	}
	private void recomponerLlaves(Robots robAux ) {
		
		Llave llaveAux;
		while (!llavesEnSalaAux.isEmpty()) {
			
			llaveAux = llavesEnSalaAux.pop();
			robAux.guardarLlave(llaveAux);
		}
	}
	
	public void volcarLaberinto (PrintWriter pw){
		
		Grafo gAux = lab.getGrafo();
		
		for (int j = 0; j < lab.getMaxColumnas(); j++) {
		
			pw.print(" _");
		}		

		pw.println();
		
		for (int i = 0; i < lab.getMaxFilas(); i++) {
			
			pw.print("|");
			
			for (int j = 0; j< lab.getMaxColumnas(); j++) {
				
				if (i != lab.getMaxFilas()-1) {
					
					if(gAux.adyacente(lab.matrizAVector(i, j), lab.matrizAVector(i+1, j))) {
						
						pw.print(" ");
					}
					
					else {
						
						pw.print("_");
					}
				}
				
				else {
					
					pw.print("_");
				}
								
				if(j != lab.getMaxColumnas()-1) {

					if(gAux.adyacente(lab.matrizAVector(i, j), lab.matrizAVector(i, j+1))) {
						
						pw.print(" ");
					}
					
					else {
						
						pw.print("|");
					}
					
				}
				

				
			}
			
			pw.print("|");
			pw.println();
		}
		
		pw.println();
	}
}
