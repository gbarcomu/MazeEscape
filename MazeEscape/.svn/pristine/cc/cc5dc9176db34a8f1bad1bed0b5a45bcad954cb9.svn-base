 /**
 * Implementación de la clase Puerta
 * @version 2.0
 * @authores Guillermo Barco Muñoz y Antonio Manuel Fuentes Duarte
 * Asignatura Desarrollo de Programas<br/>
 * Curso 14/15
 * Nombre grupo: IngenierosEnProcesión
 * Numero de entrega: EC2
 */
package Laberinto;

import java.util.LinkedList;
import java.util.Queue;

import javax.swing.JTree;

import EstrucurasDeDatos.Arbol;
import Otros.Direcciones;
import Otros.Llave;


public class Puerta {
	/** Boleano que indica el estado de la puerta. 
	 * Devuelve verdadero si esta abierta y falso en caso contrario. 
	 */
	private boolean puertaAbierta;
	/** Boleano que indica el estado de la puerta. 
	 * Devuelve verdadero si esta configurada y falso en caso contrario. 
	 */
	private boolean puertaConfigurada;
	/** Entero que nos permite almacenar la profundidad minima del árbol para que se abra la puerta.*/
	private int profundidadApertura;
	/** Entero que nos permite almacenar los nodos mínimos que deben quedar en el árbol para que se abra la puerta*/
	private int nodosMinimosApertura;
	/** Arbol binario de busqueda que contine las llaves disponibles para abrir la cerradura.*/
	private Arbol llavesCerradura;
	/** Arbol binario de busqueda que contiene las llaves que vamos probando para abrir la cerradira.*/
	private Arbol llavesProbadas;
	/** Constructor por defecto de la clase puerta que inicializa puertaConfigurada a false.*/
	
	private LinkedList<Llave> llaveroArbol = new LinkedList<Llave> ();
	//private JTree llavesCerradura1 = new JTree();
	
	public Puerta () {
		
		puertaConfigurada = false;		
	}
	/** Contructor parametrizado de la clase puerta que configura el estado de la puerta.*/
	public Puerta (Llave codigoPuerta[], int numElementos) {
		
		puertaConfigurada = true;
		puertaAbierta = false;
		
		nodosMinimosApertura = 0;
		profundidadApertura = 0;
		
		llavesCerradura = new Arbol();
		//llavesCerradura = new JTree();
		llavesProbadas = new Arbol();
		
		llaveroArbol = new LinkedList<Llave> ();
		
		algoritmoConfiguracionPuerta(0, numElementos - 1, codigoPuerta);
	}
	/** Método encargado de configurar la puerta.*/
	private void algoritmoConfiguracionPuerta(int primero, int ultimo, Llave codigoPuerta[]) {
		
		int aux = puntoMedio(primero,ultimo);
		
		llavesCerradura.insertar(codigoPuerta[aux]);	
		
		if (primero != ultimo) {
						
			algoritmoConfiguracionPuerta(primero, aux - 1, codigoPuerta);		
			algoritmoConfiguracionPuerta(aux + 1, ultimo, codigoPuerta);
		}	 
	}
	/** Método que calcula el punto medio del array para hacer la inserción en el árbol correctamente.
	 * @return el valor entero de la división. */
	private int puntoMedio (int primero, int ultimo) {
		
		return (ultimo + primero) / 2;
	}
	/** Método encargado de hacer la llamada a la configuración de la puerta. 
	 * @param codigoPuerta es el array que contiene las llaves.
	 * @param numElementos contiene el numero de elementos del array.
	 * @param profundidad indica la profundidad mínima de apertura de la puerta.
	 * @param nodosApertura indica los nodos mínimos que deben quedar en el árbol para abrir la puerta.*/
	public void configurarPuerta (Llave codigoPuerta[], int numElementos, int profundidad,
			int nodosApertura) {
		
		puertaConfigurada = true;
		puertaAbierta = false;
		
		setProfundidad(profundidad);
		setNodosMinimos(nodosApertura);
		
		llavesCerradura = new Arbol();
		llavesProbadas = new Arbol();
		
		algoritmoConfiguracionPuerta(0, numElementos - 1, codigoPuerta);	
	}
	/** Método encargado de probar las llaves para abrir la puerta. 
	 * @return devuelve verdadero si la llave probada es buena y falso en caso contrario.*/
	public boolean probarLlave (Llave llavePrueba) {
		
		boolean llaveBuena = false;
		
		if(!llavesProbadas.pertenece(llavePrueba)) {
			
			if(llavesCerradura.pertenece(llavePrueba)) {
				
				llavesProbadas.insertar(llavePrueba);
				llavesCerradura.borrar(llavePrueba);
				intentarAbrirPuerta ();
				llaveBuena = true;
			}
		}
		
		else {
			
			alarma();
		}
		
		return llaveBuena;
	}
	/** Método encargado de abrir la puerta. */
	private void intentarAbrirPuerta () {
		
		if (llavesCerradura.profundidadArbol() <= profundidadApertura
				&& llavesCerradura.numeroNodosInterno() <= nodosMinimosApertura) {
			
			puertaAbierta = true;
		}
	}
	/** Método que nos devuelve si la puerta esta configurada o no.*/
	public boolean esPuertaConfigurada () {
		
		return puertaConfigurada;
	}
	/** Método que nos devuelve si la puerta esta abierta o no. */
	public boolean esPuertaAbierta () {
		
		return puertaAbierta;
	}
	/** Método que establece la profundidad de la puerta.*/
	public void setProfundidad (int nuevaProfundidad) {
		
		profundidadApertura = nuevaProfundidad;
	}
	/** Método que obtiene la profundidad de la puerta.*/
	public int getProfundidad () {
		
		return profundidadApertura;
	}
	/** Método que establece los nodos de puerta.*/
	public void setNodosMinimos (int nuevaCantidadNodos) {
		
		nodosMinimosApertura = nuevaCantidadNodos;
	}
	/** Método que obtiene los nodos mínimos de la puerta.*/
	public int getNodosMinimos () {
		
		return nodosMinimosApertura;
	}
	/** Método encargado de dar un aviso en caso de que se pruebe dos veces la misma llave.*/
	private void alarma () {
		
		System.out.println("Alarma, se ha intentado probar la misma llave des veces.");
	}
	/** Método que nos devuelve la profundidad y los nodos mínimos estableciods para la apertura de la puerta*/
	public void profundidadYnNodosMinimos() {
		
		System.out.println("El numero de nodos minimo es:" + llavesCerradura.numeroNodosInterno());
		System.out.println("La profundidad del arbol es: " + llavesCerradura.profundidadArbol());
	}
	
	public LinkedList<Llave> mostrarLlavesCerraduraPuerta() {
		
		return (llaveroArbol = llavesCerradura.inOrden(llaveroArbol));
	}
	
//	public void mostrarLlavesProbadasPuerta() {
//		
//		llavesProbadas.inOrden();
//	}
}


