package InteractuarFicheros;

import java.util.List;

import Laberinto.Laberinto;
import Laberinto.Sala;
import Otros.Direcciones;
import Otros.Llave;
import Robot.Bender;
import Robot.RobotDropeador;
import Robot.Sonny;
import Robot.Spirit;

/**
 * Clase creada para ser usada en la utilidad cargador
 * contiene el main del cargador. Se crea una instancia de la clase Estacion, una instancia de la clase Cargador
 * y se procesa el fichero de inicio, es decir, se leen todas las líneas y se van creando todas las instancias de la simulaci�n
 * 
 * @version 1.0 -  02/11/2011 
 * @author Profesores DP
 */
public class Cargador {
	/**  
	n�mero de elementos distintos que tendr� la simulaci�n - lab, Bender, Sonny, Spirit, Asimo
	*/
	static final int NUMELTOSCONF  = 5;
	/**  
	atributo para almacenar el mapeo de los distintos elementos
	*/
	static private DatoMapeo [] mapeo;
	/**  
	referencia a la instancia del patr�n Singleton
	*/
	private Laberinto lab;
	/*
	 * necesitamos esta referencia para poder instanciar los robots y poder utilizar el laberinto*/
	
	/**
	 *  constructor parametrizado 
	 *  @param e referencia a la instancia del patr�n Singleton
	 */
	public Cargador(Laberinto lab) {
		mapeo = new DatoMapeo[NUMELTOSCONF];
		mapeo[0]= new DatoMapeo("LABERINTO", 7);
		mapeo[1]= new DatoMapeo("BENDER", 4);
		mapeo[2]= new DatoMapeo("SONNY", 4);
		mapeo[3]= new DatoMapeo("SPIRIT", 4);
		mapeo[4]= new DatoMapeo("ASIMO", 4);

	}
	
	/**
	 *  busca en mapeo el elemento leído del fichero inicio.txt y devuelve la posici�n en la que est� 
	 *  @param elto elemento a buscar en el array
	 *  @return res posici�n en mapeo de dicho elemento
	 */
	private int queElemento(String elto)  {
	    int res=-1;
	    boolean enc=false;

	    for (int i=0; (i < NUMELTOSCONF && !enc); i++)  {
	        if (mapeo[i].getNombre().equals(elto)) {
	            res=i;
	            enc=true;
	        }
	    }
	    return res;
	}
	
	/**
	 *  método que crea las distintas instancias de la simulaci�n 
	 *  @param elto nombre de la instancia que se pretende crear
	 *  @param numCampos n�mero de atributos que tendr� la instancia
	 *  @param vCampos array que contiene los valores de cada atributo de la instancia
	 */
	public void crear(String elto, int numCampos, List<String> vCampos)	{
	    //Si existe elemento y el n�mero de campos es correcto, procesarlo... si no, error
	    int numElto = queElemento(elto);

	    //Comprobaci�n de datos b�sicos correctos
	    if ((numElto!=-1) && (mapeo[numElto].getCampos() == numCampos))   {
	       //procesar
	       switch(queElemento(elto)) {
	        case 0:	   
	            crearLab(numCampos,vCampos);
	            break;
	        case 1:
	            crearBender(numCampos,vCampos);
	            break;
	        case 2:
	            crearSonny(numCampos,vCampos);
	            break;
	        case 3:
	            crearSpirit(numCampos,vCampos);
	            break;
	        case 4:
	            crearAsimo(numCampos,vCampos);
	            break;
	        
	     	}
	    }
	    else
	        System.out.println("ERROR Cargador::crear: Datos de configuraci�n incorrectos... " + elto + "," + numCampos+"\n");
	}

	/**
	 *  método que crea una instancia de la clase Planta
	 *  @param numCampos n�mero de atributos que tendr� la instancia
	 *  @param vCampos array que contiene los valores de cada atributo
	 */
	private void crearLab(int numCampos, List<String> vCampos){
	    System.out.println("Creado lab: " + vCampos.get(0)+"\n");
	  
	    int maxF = Integer.parseInt(vCampos.get(1));
	    int maxC = Integer.parseInt(vCampos.get(2));
	    int maxT = Integer.parseInt(vCampos.get(3));
	    int profPuer = Integer.parseInt(vCampos.get(4));
	    int nodPuer = Integer.parseInt(vCampos.get(5));
	    int turnoLab = Integer.parseInt(vCampos.get(6));
	    
	    lab = new Laberinto(maxF, maxC, maxT, profPuer, nodPuer,turnoLab);
	    
	}
	/**
	 *  método que crea una instancia de la clase Bender
	 *  @param numCampos n�mero de atributos que tendr� la instancia
	 *  @param vCampos array que contiene los valores de cada atributo
	 */
	private void crearBender(int numCampos, List<String> vCampos){
	    System.out.println("Creado Bender: " + vCampos.get(0) + "\n");
	    
	    int turno = Integer.parseInt(vCampos.get(3));
	    char cad;
	    cad = vCampos.get(2).charAt(0);
	    Direcciones direccionesBender[] = {Direcciones.N,Direcciones.S,Direcciones.S,Direcciones.E,
				Direcciones.E,Direcciones.O};
	    Bender bender = new Bender(vCampos.get(1), cad, 0 , 0, turno, direccionesBender);
	
		lab.insertarRobot(0, 0, bender);
	
	}
	/**
	 *  método que crea una instancia de la clase Sonny
	 *  @param numCampos n�mero de atributos que tendr� la instancia
	 *  @param vCampos array que contiene los valores de cada atributo
	 */
	private void crearSonny(int numCampos, List<String> vCampos){
	    System.out.println("Creado Sonny: " + vCampos.get(0) + "\n");
	   
	    int turno = Integer.parseInt(vCampos.get(3));
	    char cad;
	    cad = vCampos.get(2).charAt(0);
	   
	    Direcciones direccionesSonny[] = {Direcciones.N,Direcciones.S,Direcciones.S,Direcciones.E,
				Direcciones.E,Direcciones.S};			
		Sonny sonny = new Sonny(vCampos.get(1), cad, 0, 0,turno, direccionesSonny);
		lab.insertarRobot(0, 0, sonny);
	 
	}	
	/**
	 *  método que crea una instancia de la clase Spirit
	 *  @param numCampos n�mero de atributos que tendr� la instancia
	 *  @param vCampos array que contiene los valores de cada atributo
	 */
	private void crearSpirit(int numCampos, List<String> vCampos){
	    System.out.println("Creado Spirit: " + vCampos.get(0) + "\n");
	    
	    int turno = Integer.parseInt(vCampos.get(3));
	    char cad;
	    cad = vCampos.get(2).charAt(0);
	    
	    Direcciones direccionesSpirit[] = {Direcciones.N,Direcciones.S,Direcciones.E,Direcciones.E,
				Direcciones.E,Direcciones.O};			
		Spirit spirit = new Spirit(vCampos.get(1), cad, lab.getMaxFilas() -1, 0, turno, direccionesSpirit);
		
		lab.insertarRobot(lab.getMaxFilas() -1, 0, spirit);
	
	}	
	/**
	 *  método que crea una instancia de la clase Asimo
	 *  @param numCampos n�mero de atributos que tendr� la instancia
	 *  @param vCampos array que contiene los valores de cada atributo
	 */
	private void crearAsimo(int numCampos, List<String> vCampos){
	    System.out.println("Creado Asimo: " + vCampos.get(0) + "\n");
	    
	    int turno = Integer.parseInt(vCampos.get(3));
	    char cad;
	    cad = vCampos.get(2).charAt(0);
	    
		Direcciones direccionesAsimo[] = {Direcciones.N,Direcciones.S,Direcciones.N,Direcciones.O,
				Direcciones.E,Direcciones.O};
		
		Llave llaveroAsimo[] ={};
		llaveroAsimo = lab.llaveroGenerico ();
		RobotDropeador asimo = new RobotDropeador(vCampos.get(1),cad ,llaveroAsimo, lab.getMaxFilas()-1,
				lab.getMaxColumnas()-1, turno, direccionesAsimo);
	    
		lab.insertarRobot(lab.getMaxFilas()-1, lab.getMaxColumnas()-1, asimo);
	}	
}
