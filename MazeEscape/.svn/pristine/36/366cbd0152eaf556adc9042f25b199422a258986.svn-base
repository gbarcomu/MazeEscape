package EstrucurasDeDatos;
import Otros.Llave;

/**
 * Implementacion de arbol binario de busqueda.
 * @version 1.0
 * @authores Guillermo Barco Muñoz y Antonio Manuel Fuentes Duarte
 * Asignatura Desarrollo de Programas<br/>
 * Curso 14/15
 * Nombre grupo: IngenierosEnProcesion
 * Numero de entrega: EC1
 */
public class Arbol {

	/** Dato almacenado en cada nodo del árbol. */
	private Llave datoRaiz;
	
	/** Atributo que indica si el árbol está vacío. */
	boolean esVacio;
	
	/** Hijo izquierdo del nodo actual */
	private Arbol hIzq;
	
	/** Hijo derecho del nodo actual */
	private Arbol hDer;
	
	/**
	 * Constructor por defecto de la clase. Inicializa un árbol vacío.
	 */
	public Arbol() {
		
	    this.esVacio = true;
	    this.hIzq = null;
	    this.hDer = null;
	}

	/**
	 * Crea un nuevo árbol a partir de los datos pasados por parámetro.
	 *
	 * @param hIzq El hijo izquierdo del árbol que se está creando 
	 * @param datoRaiz Raíz del árbol que se está creando
	 * @param hDer El hijo derecho del árbol que se está creando
	 */
	public Arbol (Arbol hIzq, Llave datoRaiz, Arbol hDer) {
		
	    this.esVacio = false;
		this.datoRaiz = datoRaiz;
		this.hIzq = hIzq;
		this.hDer = hDer;
	}
	
	/**
	 * Devuelve el hijo izquierdo del árbol
	 *
	 * @return El hijo izquierdo
	 */
	public Arbol getHijoIzq() {
		
		return hIzq;
	}
	
	/**
	 * Devuelve el hijo derecho del árbol
	 *
	 * @return Hijo derecho del árbol
	 */
	public Arbol getHijoDer() {
		
		return hDer;
	}
	
	/**
	 * Devuelve la raíz del árbol
	 *
	 * @return La raíz del árbol
	 */
	public Llave getRaiz() {
		
		return datoRaiz;
	}
	
	/**
	 * Comprueba si el árbol está vacío.
	 * @return verdadero si el árbol está vacío, falso en caso contrario
	 */
	public boolean vacio() {
		
		return esVacio;
	}
	
	/**
	 * Inserta un nuevo dato en el árbol.
	 *
	 * @param dato El dato a insertar
	 * @return verdadero si el dato se ha insertado correctamente, falso en caso contrario
	 */
	public boolean insertar(Llave dato) {
		
	    boolean resultado=true;
	    
	    if (vacio()) {
	    	
	        datoRaiz = dato;
			esVacio = false;
		}
	    
	    else {
	    	
	        if (!(this.datoRaiz.equals(dato))) {
	        	
	            Arbol aux;
	            
	            if (dato.compareTo(this.datoRaiz) < 0) { //dato < datoRaiz
	            	
	                if ((aux = getHijoIzq()) == null)
	                    hIzq = aux = new Arbol();
	            }
	            
	            else {									//dato > datoRaiz
	            	
	                if ((aux = getHijoDer()) == null)
	                	
	                    hDer = aux = new Arbol();
	            }
	            resultado = aux.insertar(dato);
	        }
	        else{
	        	
	            resultado = false;
	        }
	    }
	    return resultado;
	}
	
	/**
	 * Comprueba si un dato se encuentra almacenado en el árbol
	 *
	 * @param dato El dato a buscar
	 * @return verdadero si el dato se encuentra en el árbol, falso en caso contrario
	 */
	public boolean pertenece(Llave dato) {
		
	    Arbol aux = null;
	    boolean encontrado = false;
	    
	    if (!vacio()) {
	    	
	        if (this.datoRaiz.equals(dato)){
	        	
	            encontrado = true;
	        }
	        
	        else {
	        	
	            if (dato.compareTo(this.datoRaiz) < 0) {	//dato < datoRaiz
	            	
	                aux = getHijoIzq();
	            }
	            else{									//dato > datoRaiz
	            	
	                aux = getHijoDer();
	            }
	            if (aux != null) {
	                encontrado = aux.pertenece(dato);
	            }
	        }
	    }
	    return encontrado;
	}
	
	/**
	 * Borrar un dato del árbol.
	 *
	 * @param dato El dato que se quiere borrar
	 */
	public void borrar(Llave dato) {
		
	    if (!vacio()) {
	    	
	        if (dato.compareTo(this.datoRaiz) <0) {			//dato<datoRaiz
	        	
	        	if(hIzq != null){
	        		
					hIzq = hIzq.borrarOrden(dato);
	        	}
			}	
	        
	        else {
	        	
	           if (dato.compareTo(this.datoRaiz) > 0) {		//dato>datoRaiz 
	            	
	            	if(hDer != null) {
	            		
	            		hDer = hDer.borrarOrden(dato);
	            	}
				}
	            else {//En este caso el dato es datoRaiz
	            
	                if (hIzq == null && hDer == null) {
	                
	                    esVacio = true;
	                }
	                
	                else{
	                	
	                    borrarOrden(dato);
	                }
	            }
	        }
	    }
	}
	

	/**
	 * Borrar un dato. Este método es utilizado por el método borrar anterior.
	 *
	 * @param dato El dato a borrar
	 * @return Devuelve el árbol resultante después de haber realizado el borrado
	 */
	private Arbol borrarOrden(Llave dato) {
	
		Llave datoaux;
	    Arbol retorno = this;
	    Arbol aborrar, candidato, antecesor;

	    if (!vacio()) {
	    	
	        if (dato.compareTo(this.datoRaiz) < 0) {		// dato<datoRaiz
	        	
	        	if(hIzq != null){
	        		
	    	        hIzq = hIzq.borrarOrden(dato);
	        	}

	        }
	        
			else{
				
	            if (dato.compareTo(this.datoRaiz) > 0) {	// dato>datoRaiz
	            	
	            		if(hDer != null){
	            			
	 	    	           hDer = hDer.borrarOrden(dato);	
	            		}

	            }
	            
				else {
					
				    aborrar = this;
				    
	                if ((hDer == null) && (hIzq == null)) { /*si es hoja*/
	                	
	                   retorno=null;
	                }
	                
	                else {
	                	
	                   if (hDer == null) { /*Solo hijo izquierdo*/
	                	   
	                        aborrar = hIzq;
	                        datoaux = this.datoRaiz;
	                        datoRaiz = hIzq.getRaiz();
	                        hIzq.datoRaiz = datoaux;
	                        hIzq = hIzq.getHijoIzq();
	                        hDer = aborrar.getHijoDer();

	                        retorno=this;
	                    }
	                    else{
	                    	
	                        if (hIzq == null) { /*Solo hijo derecho*/
	                        	
	                            aborrar = hDer;
	                            datoaux = datoRaiz;
	                            datoRaiz = hDer.getRaiz();
	                            hDer.datoRaiz = datoaux;
	                            hDer = hDer.getHijoDer();
	                            hIzq = aborrar.getHijoIzq();

	                            retorno=this;
	                        }
	                        
	                        else { /* Tiene dos hijos */
	                        	
	                            candidato = this.getHijoIzq();
	                            antecesor = this;
	                            
	                            while (candidato.getHijoDer() != null) {
	                                antecesor = candidato;
	                                candidato = candidato.getHijoDer();
	                            }

	                            /*Intercambio de datos de candidato*/
	                            datoaux = datoRaiz;
	                            datoRaiz = candidato.getRaiz();
	                            candidato.datoRaiz=datoaux;
	                            aborrar = candidato;
	                            if (antecesor == this){
	                                hIzq = candidato.getHijoIzq();
	                            }
	                            
	                            else{
	                                antecesor.hDer = candidato.getHijoIzq();
	                            }
	                        } //Eliminar solo ese nodo, no todo el subarbol
	                        
	                    aborrar.hIzq=null;
	                    aborrar.hDer=null;
	                    }
	                }
				}
			}
	    }
	    return retorno;
	}
	
	
	/**
	 * Recorrido inOrden del árbol.
	 */
	public void inOrden() {
		
	    Arbol aux = null;
	    
	    if (!vacio()) {
	        if ((aux = getHijoIzq()) != null) {
	        	
	           aux.inOrden();
	        }    
	      
	        System.out.println(this.datoRaiz.getIdLlave());
	        
	        if ((aux = getHijoDer()) != null) {
	            
	        	aux.inOrden();
	        }    
	    }
	}
	
	public void preOrden() {
	    
		Arbol aux = null;
	   
		if (!vacio()) {

	        System.out.println(this.datoRaiz.getIdLlave());
	        
	    	if ((aux = getHijoIzq()) != null) {
	    		
	            aux.preOrden();
	        }    	  
	        
	        if ((aux = getHijoDer()) != null){
	        	
	            aux.preOrden();
	        }    
	    }
	}
	
	public void postOrden() {
	   
		Arbol aux = null;
	    
		if (!vacio()) {

	    	if ((aux = getHijoIzq()) != null) {
	            
	    		aux.postOrden();
	        }    	  
	        
	        if ((aux = getHijoDer()) != null){
	           
	        	aux.postOrden();
	        } 
	        
	        System.out.println(this.datoRaiz.getIdLlave());
	    }
	}
	
	public int profundidadArbol() {
		
		int profundidad = 0, contDer = 0, contIzq = 0;
		Arbol aux;
		
		if (!vacio()) {
			
			profundidad++;
			
			if ((aux = getHijoIzq())!= null) {
				
				contIzq = aux.profundidadArbol();
			}
			
			if ((aux = getHijoDer())!= null) {
				
				contDer = aux.profundidadArbol();
			}
			
			if (contIzq > contDer) {
				
				profundidad += contIzq;
			}
			
			else {
				
				profundidad += contDer;
			}
			
			return profundidad;
			
		}
		
		return 0;
	}
	
	public boolean nodoEsHoja(Llave dato) {
		
		boolean encontrado = false;
		Arbol aux;
		
		if (!vacio()){
			
			if(datoRaiz == dato) {
								
				if(hIzq == null && hDer == null){
					
					encontrado = true;
				}
			}
			
			else {
				
				if(dato.compareTo(this.datoRaiz)<0){
					
					if((aux = getHijoIzq()) != null) {
						
						encontrado = (encontrado || aux.nodoEsHoja(dato));
					}
				}

				else{
					
					if((aux = getHijoDer()) != null) {
						
						encontrado = (encontrado || aux.nodoEsHoja(dato));
					}
				}

			}
		}
		
		return encontrado;
	}
	
	public int numeroNodosInterno() {
		
	    Arbol aux = null;
	    int contador = 0;
	    
	    if (!vacio()) {

	    	contador++;
	    	
	    	if ((aux = getHijoIzq()) != null) {
	            
		        contador += aux.numeroNodosInterno();
	        }    	  
	        
	        if ((aux = getHijoDer()) != null) {            

		        contador += aux.numeroNodosInterno();
	        } 
	        

	    }
	    
	    return contador;
	}
	
	public int numeroNodosHoja() {
		
	    Arbol aux = null;
	    int contador = 0;
	    
	    if (!vacio()) {

	    	if(hIzq == null && hDer == null){
	    		
		    	contador++;
	    	}

	    	
	    	if ((aux = getHijoIzq()) != null) {
	            
		        contador += aux.numeroNodosHoja();
	        }    	  
	        
	        if ((aux=getHijoDer())!=null){            

		        contador += aux.numeroNodosHoja();
	        } 
	        

	    }
	    
	    return contador;
	}
	
	/**
	 * Método que main que realiza las pruebas con el árbol.
	 * @param args Argumentos del main
	 */
/*	public static void main(String[] args) {
		// TODO Auto-generated method stub
	    Arbol arbol = new Arbol();
	    System.out.println("Ejemplos sesion Arrbol binario de busqueda");

	    Llave[] datos = {new Llave(20), new Llave(7), new Llave(18),
	    					   new Llave(6), new Llave(5), new Llave(1),
	    					   new Llave(22)};
	    
	    for (int i = 0; i < datos.length; i++) {
			arbol.insertar(datos[i]);
		}
	    
		// Insertando datos repetidos
	    if (arbol.insertar(new Llave(22))==false)
	        System.out.println("El ABB no admite elementos duplicados");

		// Pertenencia de un dato
	    if (arbol.pertenece(new Llave(22)))
	        System.out.println("Pertenece");
	    else
	        System.out.println("NO Pertenece");

	    // Recorrido en inOrden
		System.out.println("InOrden");
	    arbol.inOrden();
	    arbol.preOrden();
	    arbol.postOrden();
	    
	    System.out.println("La profundidad del arbol es " + arbol.profundidadArbol());
	
	    //Probando el borrado de diferentes datos -- Descomentar estas líneas para ver qué ocurre
	    
	    System.out.println("El numero de nodos es: " + arbol.numeroNodosInterno());
	    System.out.println("El numero de nodos hoja es: " + arbol.numeroNodosHoja());
		arbol.borrar(new Llave(20));
	    System.out.println("El numero de nodos es: " + arbol.numeroNodosInterno());
	    System.out.println("El numero de nodos hoja es: " + arbol.numeroNodosHoja());
//		System.out.println("Borrado " + 20);
//		arbol.borrar(new Integer(15));
//		System.out.println("Borrado " + 15);
  
	    for (int i = 0; i < datos.length; i++) {
			
			if(arbol.nodoEsHoja(datos[i])) {
				
				System.out.println("Eshoja " + datos[i]);
			}
		}
		

		
	    //Borrando datos del árbol
	    for (int i = 0; i < datos.length; i++) {
			arbol.borrar(datos[i]);
			System.out.println("Borrado " + datos[i]);
			arbol.inOrden();
		}
	}*/
}
