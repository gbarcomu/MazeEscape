package Laberinto;

import EstrucurasDeDatos.Pila;
import Otros.Direcciones;
import Otros.Llave;
import Robot.RobotRecogedor;
import Robot.Robots;


public class Laberinto {

	private Sala [][] SalasLab;
	
	private int maxColumnas;
	private int maxFilas;
	private int maxTurnos;
	private int turnoLaberinto;
	
	public Laberinto () {
		
		maxFilas = 3;
		maxColumnas = 5;
		maxTurnos = 5;
		turnoLaberinto = 0;
		SalasLab  = new Sala[maxFilas][maxColumnas];
		
		int aux;
		
		for (int i = 0; i < maxFilas; i++) {
			
			for (int j = 0; j< maxColumnas; j++) {
				
				if(i == maxFilas -1 && j == maxColumnas -1) {
					
					SalasLab[i][j] = new SalaConPuerta();
				}
				
				else {
					
					SalasLab[i][j] = new Sala();
				}
				aux = matrizAVector(i, j);
				SalasLab[i][j].setIdSala(aux);
			}			
		}
		
		RobotRecogedor Bender = new RobotRecogedor('B',"Bender");
		SalasLab[0][0].robotEntra(Bender);
		RobotRecogedor Paco = new RobotRecogedor('B',"Paco");
		SalasLab[1][1].robotEntra(Paco);
		
		Bender.mover(0, 0);
		Paco.mover(1, 1);
		
		distribuirLlaves();
	}
	
//	Laberinto (Llave codigoPuerta[], Llave llavesTotales[], Robots robotsTotales[], int numeroDeSalas) {
//
//		SalasLaberinto = new Sala[numeroDeSalas];
//		
//		for (int i = 0; i < numeroDeSalas -1; i++) {
//						
//				SalasLaberinto[i] = new Sala();			
//		}
//		
//		SalasLaberinto[numeroDeSalas -1] = new SalaConPuerta();		
//	}
	
//	Laberinto(int numSalas,int ancho, int alto) {
//		
//		SalasLab = new Sala [ancho][alto];
//		
//		for (int i = 0; i < ancho -1; i++) {
//			
//			for (int j = 0; j< alto -1; j++) {
//				
//				SalasLab[i][j] = new Sala();
//			}
//			
//		}
//			
//	}
	private int matrizAVector(int filas, int columnas) {
		
		return (filas * maxColumnas) + columnas;
	}
	
	private void distribuirLlaves() {
		
		int[] idSalasConLlave = {3, 4, 6, 8, 9, 10, 11, 12, 13};
		int llavesPorSala = 45/idSalasConLlave.length;
		int pIn = 0;
		int pFin = llavesPorSala;
		int llaveActual = 0;
		
		boolean incrementoImpar = false;
		
		for (int k = 0; k < idSalasConLlave.length; k++) {
			
			int aux = idSalasConLlave[k];

				for (int i = pIn; i < pFin; i++) {
					
					Llave llaux = new Llave(llaveActual);
					SalasLab[aux/maxColumnas][aux%maxColumnas].repartirLlavesOrdenSala(llaux);
					
					if(llaveActual % 2 == 0 || incrementoImpar) {
						
						llaveActual++;
						incrementoImpar = false;
					}
					
					else {
						
						incrementoImpar = true;
					}
				}	
				
				pIn = pFin;
				pFin += llavesPorSala;

		}
	}	

	public void mostrarLlavesRestantes() {
		
		System.out.println("Llave: ");
		for (int i = 0; i < maxFilas; i++) {
			
			for (int j = 0; j< maxColumnas; j++) {
							
				System.out.println("Sala: " + SalasLab[i][j].getIdSala());
				
				while(!SalasLab[i][j].llaveroVacio()) {
					
					System.out.println("Llave: "+ SalasLab[i][j].recogerLlaveSala().getIdLlave());
				}
			}
		}
	}	

	private void moverRobotLaberinto() {
		
		Robots aux;
		Direcciones proximoMovimiento;
		boolean hayRobot;
		
		for (int i = 0; i < maxFilas; i++) {
			
			for (int j = 0; j< maxColumnas; j++) {
				
				hayRobot = false;	
				
				if (SalasLab[i][j].hayRobot()){
					
					hayRobot = true;
					aux = SalasLab[i][j].mostrarRobot();				
				
					while(hayRobot && aux.getTurnoRobot() == turnoLaberinto) {
						
						robotHaceSusCosas (i, j, aux);
						aux.incrementarTurno();
						SalasLab[i][j].robotSale();
						proximoMovimiento = aux.siguienteMovimiento();
						comprobarPared(proximoMovimiento,i,j,aux);
					
						hayRobot = false;
					
						if (SalasLab[i][j].hayRobot()) {
						
							hayRobot = true;
							aux = SalasLab[i][j].mostrarRobot();
						}											
					}
				}				
			}	
		}
	}
	
	private void comprobarPared(Direcciones next, int x, int y, Robots aux) {
		
		switch (next) {
					
			case N:
			
				if(x != 0) {
							
					x -= 1;
				}
						
				break;
						
			case E:
						
				if(y != maxColumnas -1) {
							
					y += 1;
				}
						
				break;
						
			case S:
						
				if(x != maxFilas -1) {
							
					x += 1;
				}
						
				break;
						
			case O:
				
				if(y != 0) {
							
					y -= 1;
				}
					
				break;	
			}
		SalasLab[x][y].robotEntra(aux);
		aux.mover(x, y);
	}
	
	public void dondeEsta() {
		
		for (int i = 0; i < maxFilas; i++) {
			
			for (int j = 0; j< maxColumnas; j++) {
				
				System.out.println("Sala " + i +"---" + j);
				
				if(SalasLab[i][j].hayRobot()) {
					
					System.out.println("Esta el robot: " + SalasLab[i][j].mostrarRobot().getNombre());
				}
				
				else {
					
					System.out.println("No hay robots.");
				}
			}
		}
	}
	public void gestorDeTurnos() {
		
		while(turnoLaberinto < maxTurnos) {
			
			moverRobotLaberinto();
			turnoLaberinto++;
		}
	}
	
	private void robotHaceSusCosas (int i, int j, Robots robotAux) {
		
		if(!SalasLab[i][j].llaveroVacio()) {
			
			Llave aux;
			aux = SalasLab[i][j].recogerLlaveSala();
			robotAux.interactuarLlave(aux);
		}
	}
	
	
}
